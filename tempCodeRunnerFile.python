def merge_sort(arr):
    if len(arr) <= 1:
        return arr, 0
    
    mid = len(arr) // 2
    left, left_inversions = merge_sort(arr[:mid])
    right, right_inversions = merge_sort(arr[mid:])
    
    merged, merge_inversions = merge(left, right)
    
    total_inversions = left_inversions + right_inversions + merge_inversions
    
    return merged, total_inversions

def merge(left, right):
    merged = []
    inversions = 0
    i = j = 0
    
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            merged.append(left[i])
            i += 1
        else:
            merged.append(right[j])
            j += 1
            inversions += len(left) - i
    
    merged.extend(left[i:])
    merged.extend(right[j:])
    
    return merged, inversions

def count_inversions(arr):
    _, inversions = merge_sort(arr)
    return inversions
l = list(map(int,input().split()))
i = count_inversions(l)
print(i)